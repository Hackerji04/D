Assignment no 1A
#include <stdio.h>
voidmain()
{

intcapacity=50;

intvalue[]={60,100,120};

intweight[]={10,20,30};

intno_items=3,cur_weight,item;intused[10];
floattotal_profit;inti;
for(i=0;i<no_items;++i)used[i]=0;
cur_weight=capacity;while(cur_weight>0)
{

item=-1;

for(i=0;i<no_items;++i)

if ((used[i] == 0) && ((item == -1) || ((float)value[i] / weight[i] > (float)value[item] /weight[item])))

item=i;
used[item]=1;
cur_weight -= weight[item];
total_profit+value[item];
 
if(cur_weight>=0)

printf("Added object %d (%d Rs., %dKg) completely in the bag. Space left: %d.\n", item +1,value[item],weight[item],cur_weight);

else

{

intitem_percent=(int)((1+(float)cur_weight/weight[item])*100);

printf("Added %d%% (%d Rs., %dKg) of object %d in the bag.\n",item_percent,value[item],weight[item],item+1);

total_profit-=value[item];

total_profit+=(1+(float)cur_weight/weight[item])*value[item];

}

}

printf("Filledthebagwithobjectsworth%.2fRs.\n",total_profit);

}


Assignment 1B

-#include<stdio.h>
//Autilityfunctionthatreturns
 
// maximumoftwointegers

intmax(inta,intb){return(a>b) ?a:b;}



//Returnsthemaximumvaluethatcanbe

// putina knapsack ofcapacityW

intknapSack(intW,intwt[],intval[],intn)

{

//BaseCase

if(n==0||W==0)

return0;

//Ifweightofthenthitemismorethan

//KnapsackcapacityW,thenthisitemcannot

//beincludedintheoptimalsolutionif(wt[n-1]>W)
returnknapSack(W,wt,val,n-1);


//Returnthemaximumoftwocases:

//(1)nthitemincluded

//(2)notincludedelse
returnmax(

val[n-1]

+ knapSack(W-wt[n-1],

wt,val,n-1),
 
knapSack(W,wt,val,n-1));

}

// Driver program to test above functionintmain()
{

intval[]={60,100,120 };

intwt[]={10,20,30};

intW=50;

int n = sizeof(val) / sizeof(val[0]);printf("%d",knapSack(W,wt,val,n));return0;
}




Assignment 2

#include<iostream>
using namespace std;

struct Edge{
    int src,dest,weight;
};

struct Graph{
    int V,E;
    struct Edge* edge;
};

struct Graph* createGraph(int V, int E){
    struct Graph* graph = new Graph;
    graph->V = V;
    graph->E = E;
    graph->edge = new Edge[E];
    return graph; 
}

void printArr(int dist[], int n)
{
    printf("Vertex   Distance from Source\n");
    for (int i = 0; i < n; ++i)
        printf("%d \t\t %d\n", i, dist[i]);
}

void BellmanFord(struct Graph* graph, int src){
    int V = graph->V;
    int E = graph->E;
    int dist[V];
 
    for (int i = 0; i < V; i++) dist[i] = INT_MAX;
    dist[src] = 0;

    for(int i= 1;i<= V-1;i++){
        for(int j = 0;j<E;j++){
            int u = graph->edge[j].src;
            int v = graph->edge[j].dest;
            int weight = graph->edge[j].weight;
            if(dist[u] != INT_MAX && dist[u]+ weight < dist[v]) dist[v] = dist[u] + weight;
        }
    }  
     for (int i = 0; i < E; i++) {
        int u = graph->edge[i].src;
        int v = graph->edge[i].dest;
        int weight = graph->edge[i].weight;
        if (dist[u] != INT_MAX
            && dist[u] + weight < dist[v]) {
            printf("Graph contains negative weight cycle");
            return; 
        }
    }  
    printArr(dist, V);
}

int main(){
    int V,E;
    cin>>V>>E;
    struct Graph* graph = createGraph(V,E);
    for(int i = 0;i<E;i++){
        int src,dest,weight;
        cin>>src>>dest>>weight;
        graph->edge[i].src = src;
        graph->edge[i].dest = dest;
        graph->edge[i].weight = weight;
    }
    BellmanFord(graph,0);
}



Assignment 3

#include <stdio.h>
#include<stdlib.h>
#include<string.h>
int a[30], count;
int place(int i, int j)
{
int k;
for (k = 1; k <= i - 1; k++)
{
if (a[k] == j)
{
return 0;
}
else if(abs(a[k] - j) == abs(k - i))
{
return 0;
}
}
return 1;
}
void print_func(int n)
{
int i, j, k;
printf("\n solution number= %d\n", ++count);
for (i = 1; i <= n; i++)
{
printf("\t%d", i);
}
for (i = 1; i <= n; i++)
{
printf("\n%d", i);
for (j = 1; j <= n; j++)
{
if (a[i] == j)
{
printf("\tQ");
}
else
{
printf("\t-");
}
}
}
}
void queen(int i, int n)
{
int j, k;
for (j = 1; j <= n; j++)
{
if (place(i, j))
{
a[i] = j;
if (i == n)
{
print_func(n);
}
else
{
queen(i + 1, n);
}
}
}
}
int main()
{
int n;
printf("\n\nEnter the number of queens: ");
scanf("%d", &n);
queen(1, n);
return 0;
}




Fractinal Knapsack
#include<iostream>
#include<algorithm>
using namespace std;
struct data{
    int profit;
    int weight;
};

bool sortData(struct data d1, struct data d2){
   return (d1.profit/d1.weight) > (d2.profit/d2.weight);
}

void fractionalKnapsack(struct data d[],int n,int capacity){
   sort(d,d+n,sortData);
   int temp_capacity = capacity;
   double profit = 0; 
   for(int i = 0;i<n;i++){
    if(d[i].weight<=temp_capacity){
        temp_capacity -= d[i].weight;
        profit += d[i].profit;
    }
    else{
        profit = profit + (float(temp_capacity)/float(d[i].weight))*float(d[i].profit);
        break;
    }
   }
   cout<<"Max profit = "<<profit;
}

int main(){
    int n;
    cout<<"Enter the no of elements = ";
    cin>>n;
    int capacity;
    cout<<"Enter the bag capacity = ";
    cin>>capacity;
    struct data d[n];
    for(int i = 0;i<n;i++){
        cout<<"\nEnter the profit = ";
        cin>>d[i].profit;
        cout<<"Enter the weight = ";
        cin>>d[i].weight;
        cout<<endl;
    }
    fractionalKnapsack(d,n,capacity);
}
